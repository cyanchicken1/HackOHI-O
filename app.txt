import React, { useEffect, useRef, useState } from 'react';
import { StyleSheet, View, Text, ActivityIndicator, Platform, Linking } from 'react-native';
import MapView, { Polyline, Marker } from 'react-native-maps';
import polyline from 'polyline';
import * as Location from 'expo-location';
import { StatusBar } from 'expo-status-bar';

import { fetchAllRoutes } from './osuBusAPI';

import SearchDrawer from './SearchDrawer';
import buildingData from './osu_building_points.json';
import { Colors } from './style/theme';

const ALL_BUILDINGS = (buildingData?.buildings || []).map((b) => ({
  id: b.number,
  name: b.name,
  latitude: b.latitude,
  longitude: b.longitude,
}));

// Hard-set OSU camera start
const OSU_REGION = {
  latitude: 40.0000,
  longitude: -83.0145,
  latitudeDelta: 0.04,
  longitudeDelta: 0.04,
};

export default function App() {
  const mapRef = useRef(null);

  const [userRegion, setUserRegion] = useState(null);   // real GPS (for blue dot + distances)
  const [errorMsg, setErrorMsg] = useState(null);
  const [destination, setDestination] = useState(null);

  const [routes, setRoutes] = useState(null);
  const [loadingRoutes, setLoadingRoutes] = useState(true);

  // Get GPS (do NOT move camera to it)
  useEffect(() => {
    (async () => {
      try {
        const { status } = await Location.requestForegroundPermissionsAsync();
        if (status !== 'granted') {
          setErrorMsg('Permission to access location was denied.');
          return;
        }
        const loc = await Location.getCurrentPositionAsync({ accuracy: Location.Accuracy.High });
        const { latitude, longitude } = loc.coords;
        setUserRegion({ latitude, longitude, latitudeDelta: 0.01, longitudeDelta: 0.01 });
      } catch (e) {
        setErrorMsg(e.message || 'Failed to get location');
      }
    })();
  }, []);

  // Fetch OSU bus routes
useEffect(() => {
  const fetchRoutes = async () => {
    try {
      const data = await fetchAllRoutes();
      setRoutes(data);
    } catch (err) {
      console.error('Error fetching routes:', err);
    } finally {
      setLoadingRoutes(false);
    }
  };

  // Initial fetch
  fetchRoutes();

  // Refresh every 15 seconds
  const interval = setInterval(fetchRoutes, 15000);

  // Cleanup on unmount
  return () => clearInterval(interval);
}, []);

  const handleSelectBuilding = (b) => {
    setDestination(b);
    mapRef.current?.animateToRegion(
      { latitude: b.latitude, longitude: b.longitude, latitudeDelta: 0.004, longitudeDelta: 0.004 },
      700
    );
  };

  if (errorMsg && !userRegion) {
    // Only block if we have an error *and* no map yet — otherwise we still show OSU.
    return (
      <View style={styles.center}>
        <Text style={{ textAlign: 'center' }}>{errorMsg}</Text>
        <Text style={{ marginTop: 8, color: '#BA0c2F' }} onPress={() => Linking.openSettings && Linking.openSettings()}>
          Open app settings
        </Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <MapView
        ref={mapRef}
        style={styles.map}
        initialRegion={OSU_REGION}                 // 1) default to OSU
        onMapReady={() => {
          // 2) force snap to OSU right away (covers platforms where initialRegion isn't immediate)
          mapRef.current?.animateToRegion(OSU_REGION, 0);
        }}
        showsUserLocation={true}                   // show blue dot when permission granted
        showsMyLocationButton={true}
        mapType={Platform.OS === 'ios' ? 'standard' : 'standard'}
      >
        {/* Optional campus marker (keeps a visual anchor on OSU) */}
        <Marker
          coordinate={{ latitude: OSU_REGION.latitude, longitude: OSU_REGION.longitude }}
          title="Ohio State University"
        />

        {/* Optional explicit user marker (keeps label); blue dot also shows */}
        {userRegion && (
          <Marker
            coordinate={{ latitude: userRegion.latitude, longitude: userRegion.longitude }}
            title="You are here"
          />
        )}

        {/* Destination after selection */}
        {destination && (
          <Marker
            key={String(destination.id)}
            coordinate={{ latitude: destination.latitude, longitude: destination.longitude }}
            title={destination.name}
            pinColor="#ba0c2f"
          />
        )}

        {/* === OSU Bus Routes === */}
        {!loadingRoutes && routes &&
          Object.values(routes).map((route, index) => {
            if (!route) return null;

            // Use API color if provided; otherwise rotate through theme's busRoute palette; final fallback to busRouteDefault
            const baseColor =
              (typeof route.color === 'string' && route.color.trim()) ||
              Colors.busRoute[index % Colors.busRoute.length] ||
              Colors.busRouteDefault;

            const z = 10;

            return (
              <React.Fragment key={String(route.id)}>
                {/* 🛣️ Route Lines */}
                {Array.isArray(route.patterns) && route.patterns.map((pattern) => {
                  if (!pattern?.encodedPolyline) return null;

                  let coords = [];
                  try {
                    coords = polyline.decode(pattern.encodedPolyline).map(([lat, lng]) => ({
                      latitude: Number(lat),
                      longitude: Number(lng),
                    }));
                  } catch (e) {
                    console.warn('Failed to decode polyline for pattern', pattern?.id, e);
                    return null;
                  }

                  coords = coords.filter(c => isFinite(c.latitude) && isFinite(c.longitude));
                  if (coords.length < 2) return null;

                  return (
                    <Polyline
                      key={String(pattern.id)}
                      coordinates={coords}
                      strokeColor={baseColor}
                      strokeWidth={4}
                      zIndex={z}
                      lineCap="round"
                      lineJoin="round"
                      geodesic
                    />
                  );
                })}

                {/* 🚏 Stop Markers */}
                {Array.isArray(route.stops) && route.stops.map((stop) => {
                  const lat = Number(stop?.latitude);
                  const lng = Number(stop?.longitude);
                  if (!isFinite(lat) || !isFinite(lng)) return null;

                  return (
                    <Marker
                      key={String(stop?.id ?? `${lat},${lng}`)}
                      coordinate={{ latitude: lat, longitude: lng }}
                      title={stop?.name ?? 'Stop'}
                      pinColor={baseColor}
                      zIndex={z + 1}
                    />
                  );
                })}
                {/* 🚌 Bus Vehicles */}
{/* 🚌 Bus Vehicles */}
{Array.isArray(route.vehicles) && route.vehicles.map((vehicle) => {
  const lat = Number(vehicle?.latitude);
  const lng = Number(vehicle?.longitude);
  if (!isFinite(lat) || !isFinite(lng)) return null;

  return (
    <Marker
      key={`bus-${route.id}-${vehicle?.id ?? `${lat},${lng}`}`}
      coordinate={{ latitude: lat, longitude: lng }}
      title={`Bus ${vehicle?.id ?? 'Unknown'}`}
      description={`Next: ${vehicle?.nextStop ?? 'Unknown'}`}
      pinColor={baseColor}
      zIndex={z + 2}
      // Optional: rotate the marker based on heading
      rotation={vehicle?.heading ?? 0}
      flat={true}
    >
      {/* Optional: Custom bus icon instead of pin */}
      <View style={{
        backgroundColor: baseColor,
        padding: 6,
        borderRadius: 4,
        borderWidth: 2,
        borderColor: 'white',
      }}>
        <Text style={{ color: 'white', fontWeight: 'bold', fontSize: 12 }}>🚌</Text>
      </View>
    </Marker>
  );
})}
              </React.Fragment>
            );
          })
        }

      </MapView>

      {/* Bottom search drawer (peeks, pulls up, top-3 nearest, Enter to select) */}
      <SearchDrawer
        userLocation={
          userRegion ? { latitude: userRegion.latitude, longitude: userRegion.longitude } : null
        }
        buildings={ALL_BUILDINGS}
        onSelect={handleSelectBuilding}
      />

      <StatusBar style="auto" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1 },
  map: { flex: 1 },
  center: { flex: 1, alignItems: 'center', justifyContent: 'center' },
});
